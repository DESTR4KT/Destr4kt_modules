# ‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶
#   _______ _      ______          _____          
#  |__   __| |    |  ____|   /\   |  __ \         
#     | |  | |__  | |__     /  \  | |  | |        
#     | |  | '_ \ |  __|   / /\ \ | |  | |        
#     | |  | | | || |____ / ____ \| |__| |        
#     |_|  |_| |_||______/_/    \_\_____/  v1.0  
#
#   ‚ú™ –ú–æ–¥—É–ª—å —Å–¥–µ–ª–∞–Ω @destr4kt_def
# ‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶

from .. import loader, utils
import asyncio, random

def get_empty_board():
    return [[" "]*3 for _ in range(3)]

def render_board(board):
    symbols = {"X": "‚ùå", "O": "‚≠ï", " ": "‚¨ú"}
    return "\n".join("".join(symbols[cell] for cell in row) for row in board)

def check_winner(board):
    for p in ["X", "O"]:
        b = board
        win = any([
            all(c == p for c in row) for row in b
        ]) or any([
            all(row[i] == p for row in b) for i in range(3)
        ]) or all([
            b[i][i] == p for i in range(3)
        ]) or all([
            b[i][2-i] == p for i in range(3)
        ])
        if win:
            return p
    return None

def board_full(board):
    return all(cell != " " for row in board for cell in row)

class TicTacToeMod(loader.Module):
    """üéÆ –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏: –∏–≥—Ä–∞ —Å –ò–ò –∏–ª–∏ –≤–¥–≤–æ—ë–º

–ú–æ–¥—É–ª—å —Å–¥–µ–ª–∞–Ω @destr4kt_def
"""
    strings = {"name": "TicTacToe"}

    def __init__(self):
        self.games = {}
        self.stats = {}

    async def client_ready(self, client, db):
        self.db = db
        self.stats = db.get("TicTacToe", "stats", {})

    def save_stats(self):
        self.db.set("TicTacToe", "stats", self.stats)

    async def tictactoeaicmd(self, message):
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –ò–ò"""
        uid = message.chat_id
        self.games[uid] = {"board": get_empty_board(), "turn": "X", "ai": True}
        await message.edit("üéÆ –ò–≥—Ä–∞ —Å –ò–ò –Ω–∞—á–∞—Ç–∞!\n–•–æ–¥–∏—Ç–µ: .move <1-9>\n\n" + render_board(self.games[uid]["board"]))

    async def tictactoecmd(self, message):
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤–¥–≤–æ—ë–º"""
        uid = message.chat_id
        self.games[uid] = {"board": get_empty_board(), "turn": "X", "ai": False}
        await message.edit("üéÆ –ò–≥—Ä–∞ 1v1 –Ω–∞—á–∞—Ç–∞!\n–•–æ–¥–∏—Ç–µ: .move <1-9>\n\n" + render_board(self.games[uid]["board"]))

    async def movecmd(self, message):
        """–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥: .move <–ø–æ–∑–∏—Ü–∏—è –æ—Ç 1 –¥–æ 9>"""
        args = utils.get_args(message)
        uid = message.chat_id

        if uid not in self.games:
            await message.edit("üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
            return

        game = self.games[uid]

        if check_winner(game["board"]) or board_full(game["board"]):
            del self.games[uid]
            await message.edit("üéØ –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return

        if not args or not args[0].isdigit() or not 1 <= int(args[0]) <= 9:
            await message.edit("‚ùó –£–∫–∞–∂–∏ –ø–æ–∑–∏—Ü–∏—é –æ—Ç 1 –¥–æ 9.")
            return

        pos = int(args[0]) - 1
        row, col = divmod(pos, 3)

        if game["board"][row][col] != " ":
            await message.edit("üö´ –ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞!")
            return

        player = game["turn"]
        game["board"][row][col] = player

        winner = check_winner(game["board"])
        full = board_full(game["board"])

        if winner or full:
            await self.end_game(message, winner, game)
            return

        game["turn"] = "O" if player == "X" else "X"

        if game["ai"] and game["turn"] == "O":
            await asyncio.sleep(0.5)
            self.ai_move(game)
            winner = check_winner(game["board"])
            full = board_full(game["board"])
            if winner or full:
                await self.end_game(message, winner, game)
                return
            game["turn"] = "X"

        await message.edit(f"üß© –•–æ–¥: {game['turn']}\n\n" + render_board(game["board"]))

    def ai_move(self, game):
        b = game["board"]
        for i in range(3):
            for j in range(3):
                if b[i][j] == " ":
                    b[i][j] = "O"
                    if check_winner(b) == "O":
                        return
                    b[i][j] = " "
        for i in range(3):
            for j in range(3):
                if b[i][j] == " ":
                    b[i][j] = "X"
                    if check_winner(b) == "X":
                        b[i][j] = "O"
                        return
                    b[i][j] = " "
        empties = [(i, j) for i in range(3) for j in range(3) if b[i][j] == " "]
        if empties:
            i, j = random.choice(empties)
            b[i][j] = "O"

    async def end_game(self, message, winner, game):
        board = render_board(game["board"])
        uid = message.chat_id
        if winner:
            text = f"üéâ –ü–æ–±–µ–¥–∞: {winner}!\n\n{board}"
            self.stats[str(uid)] = self.stats.get(str(uid), {"X": 0, "O": 0, "draws": 0})
            self.stats[str(uid)][winner] += 1
        else:
            text = f"ü§ù –ù–∏—á—å—è!\n\n{board}"
            self.stats[str(uid)]["draws"] += 1
        self.save_stats()
        del self.games[uid]
        await message.edit(text)

    async def ttstatscmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uid = str(message.chat_id)
        stat = self.stats.get(uid, {"X": 0, "O": 0, "draws": 0})
        await message.edit(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚ùå –ü–æ–±–µ–¥ X: {stat['X']}\n"
            f"‚≠ï –ü–æ–±–µ–¥ O: {stat['O']}\n"
            f"ü§ù –ù–∏—á—å–∏—Ö: {stat['draws']}"
        )

    async def ttresetcmd(self, message):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uid = str(message.chat_id)
        self.stats[uid] = {"X": 0, "O": 0, "draws": 0}
        self.save_stats()
        await message.edit("‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

    async def tthelpcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è"""
        await message.edit(
            "üïπ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è TicTacToe:\n\n"
            "‚Ä¢ .tictactoe ‚Äî –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤–¥–≤–æ—ë–º\n"
            "‚Ä¢ .tictactoeai ‚Äî –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –ò–ò\n"
            "‚Ä¢ .move <1-9> ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥\n"
            "‚Ä¢ .ttstats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –∏ –Ω–∏—á—å–∏—Ö\n"
            "‚Ä¢ .ttreset ‚Äî —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )